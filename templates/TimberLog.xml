<templateSet group="TimberLog">
  <template name="timt" value="timber.log.Timber.tag(&quot;$tag$&quot;)" description="a  logtag  for the next logging call" toReformat="true" toShortenFQNames="true">
    <variable name="tag" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="timv" value="timber.log.Timber.v(&quot;$METHOD_NAME$: $content$&quot;)" description="Timber.v(Method Name : String)" toReformat="true" toShortenFQNames="true">
    <variable name="METHOD_NAME" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="content" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="timd" value="timber.log.Timber.d(&quot;$METHOD_NAME$: $content$&quot;)" description="Timber.d(Method Name : String)" toReformat="true" toShortenFQNames="true">
    <variable name="METHOD_NAME" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="content" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="timi" value="timber.log.Timber.i(&quot;$METHOD_NAME$: $content$&quot;)" description="Timber.i(Method Name : String)" toReformat="true" toShortenFQNames="true">
    <variable name="METHOD_NAME" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="content" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="timw" value="timber.log.Timber.w(&quot;$METHOD_NAME$: $content$&quot;)" description="Timber.w(Method Name : String)" toReformat="true" toShortenFQNames="true">
    <variable name="METHOD_NAME" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="content" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="time" value="timber.log.Timber.e(&quot;$METHOD_NAME$: $content$&quot;)" description="Timber.e(Method Name : String)" toReformat="true" toShortenFQNames="true">
    <variable name="METHOD_NAME" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="content" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="timm" value="timber.log.Timber.d($content$)" description="Timber.d(Method Name : Arugments)" toReformat="true" toShortenFQNames="true">
    <variable name="content" expression="groovyScript(&quot;def params = _2.collect {it + ' = $' + it}.join(', '); return '\&quot;' + _1 + '() called' + (params.empty  ? '' : ' with: ' + params) + '\&quot;'&quot;, kotlinFunctionName(), functionParameters())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="timr" value="timber.log.Timber.d(&quot;$METHOD_NAME$() returned: &quot; + $result$)" description="Log result of this method" toReformat="true" toShortenFQNames="true">
    <variable name="METHOD_NAME" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="result" expression="variableOfType(methodReturnType())" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="KOTLIN" value="true" />
    </context>
  </template>
</templateSet>